" Use Pathogen for plugins
"execute pathogen#infect()

set nocompatible              " be iMproved, required
filetype off                  " required

" Use vim-plug for plugins
call plug#begin('~/.vim/plugged')

" Editing
if has('nvim')
  Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
  Plug 'Shougo/vimshell.vim'
  Plug 'zchee/deoplete-jedi'
  Plug 'zchee/deoplete-go'
  Plug 'zchee/deoplete-zsh'
  Plug 'fishbullet/deoplete-ruby'
  Plug 'sbdchd/neoformat'
  Plug 'Shougo/denite.nvim'
  Plug 'Shougo/neosnippet.vim'
  Plug 'Shougo/neosnippet-snippets'
endif

Plug 'ctrlpvim/ctrlp.vim'
Plug 'vim-scripts/L9'

Plug 'godlygeek/tabular'
Plug 'jamessan/vim-gnupg'
Plug 'majutsushi/tagbar'
Plug 'mileszs/ack.vim'
Plug 'nathanaelkane/vim-indent-guides'
Plug 'osyo-manga/vim-over'
Plug 'spf13/vim-autoclose'
Plug 'tomtom/tcomment_vim'
Plug 'tpope/vim-abolish'
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-surround'

" Syntax
Plug 'Glench/Vim-Jinja2-Syntax'
Plug 'ap/vim-css-color'
Plug 'elzr/vim-json'
Plug 'hdima/python-syntax'
Plug 'markcornick/vim-terraform'
Plug 'tpope/vim-git'
Plug 'tpope/vim-markdown'
Plug 'voxpupuli/vim-puppet'
Plug 'w0rp/ale'

" Lang
Plug 'vim-ruby/vim-ruby'
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }

" Frameworks
Plug 'tpope/vim-rails'
Plug 'tpope/vim-rake'
Plug 'tpope/vim-projectionist'
Plug 'tpope/vim-bundler'

" Colors
Plug 'Reewr/vim-monokai-phoenix'
Plug 'chase/focuspoint-vim'
Plug 'chriskempson/base16-vim'
Plug 'colepeters/spacemacs-theme.vim'
Plug 'danilo-augusto/vim-afterglow'
Plug 'dracula/vim', { 'as': 'dracula' }
Plug 'fatih/molokai'
Plug 'freeo/vim-kalisi'
Plug 'guns/jellyx.vim'
Plug 'jnurmine/Zenburn'
Plug 'joshdick/onedark.vim'
Plug 'morhetz/gruvbox'
Plug 'noahfrederick/vim-noctu'
Plug 'rakr/vim-one'
Plug 'robertmeta/nofrils'
Plug 'sickill/vim-monokai'
Plug 'w0ng/vim-hybrid'

" Tmux
Plug 'benmills/vimux'
Plug 'christoomey/vim-tmux-navigator'

" Appearance
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'


call plug#end()

" Enable filetype plugin
filetype indent on
filetype plugin on
syntax on

"
" General
set encoding=utf8
set t_Co=256 " Ignored by nvim
let &t_AB="\e[48;5;%dm"
let &t_AF="\e[38;5;%dm"
let &colorcolumn="80,".join(range(120,999),",")

set mouse=a

set termguicolors

" Color configurations
let g:gruvbox_contrast_dark = 'medium'
let g:gruvbox_hls_cursor = 'green'

"
"set guifont=Source\ Code\ Pro:h14
if has('nvim')
  set guifont=Hack\ 12
else
  set guifont=Hack:h12
endif
set guioptions+=i  " show Vim icon in Taskbar
set guioptions-=a  "remove autoselect
set guioptions-=A  "remove autoselect
set guioptions-=m  "remove menu bar
set guioptions-=T  "remove toolbar
set guioptions-=r  "remove right-hand scroll bar
set guioptions-=l  "remove left-hand scroll bar
set guioptions-=R  "remove right-hand scroll bar if there is a vertical split
set guioptions-=L  "remove left-hand scroll bar if there is a vertical split


if !has('nvim')
  set term=xterm-256color
endif

"
" Text Format
set ai
set si
set wrap
set autoread
set softtabstop=2
set shiftwidth=2
set tabstop=2
set shiftround             " round > and < to nearest shiftwitdh
set expandtab              " expand tabs to spaces
set smarttab               " insert blanks according to shiftwidth, tabstop, etc
set virtualedit=block      " allow virtual edit in visual block ..

"
" UI
set noerrorbells novisualbell t_vb=
set backspace=eol,start,indent
set cursorline
set ruler                  " show the cursor position all the time
set noshowcmd              " don't display incomplete commands
" set redraw
set number                 " line numbers
" set rnu                    " use relative numbering
set wildmenu               " turn on wild menu
set wildmode=list:longest,full
" set ch=2                   " command line height
set whichwrap+=<,>,h,l,[,] " backspace and cursor keys wrap to
set shortmess=filtIoOA     " shorten messages
set report=0               " tell us about changes
set nostartofline          " don't jump to the start of line when scrolling
set showmode
set statusline=%F%m%r%h%w\ %#LineNr#%{fugitive#statusline()}%#StatusLine#\ [FORMAT=%{&ff}]\ [TYPE=%Y]\ [ASCII=\%03.3b]\ [HEX=\%02.2B]\ [POS=%04l,%04v][%p%%]\ [LEN=%L]
set scrolloff=3
"set ttyfast
"set showcmd                " Show (partial) command in status line.
set nofoldenable
"set report=0               " report when > 0 lines changed by command
set completeopt=longest,menuone

setlocal comments-=:#
set hidden              " Enable 'hidden' buffers

set splitright " on vertical split move focus to the right window
set splitbelow " on horizontal split move focus to the bottom window

"
" Backups
set directory=~/.vim/swp        " keep swp files under ~/.vim/swap

"
" Searching
set hlsearch               " highlight searches
set incsearch              " do incremental searching
set ignorecase             " ignore case when searching
set smartcase              " ... unless ther's a cApItOl"

"
" Highlight Trailing Whitespace
set list
set listchars=tab:»·,trail:·
"set listchars=tab:▸\ ,eol:¬,trail:⋅,extends:❯,precedes:❮
"set showbreak=↪

"
" Visual Cues
set mat=2
set showmatch
set laststatus=2
"set visualbell

" Suffixes that get lower priority when doing tab completion for filenames.
" These are files we are not likely to want to edit or read.
set suffixes=.bak,~,.swp,.o,.info,.aux,.log,.dvi,.bbl,.blg,.brf,.cb,.ind,.idx,.ilg,.inx,.out,.toc

"
" Disable autocompletion popup.
let g:AutoComplPop_NotEnableAtStartup = 1

"----- viewoutput configuration
let g:viewoutput_newbuffer="bot 5new"



"
" Printing Options
set printoptions=header:2,syntax:a,number:y,wrap:y,duplex:long,collate:y,jobsplit:y,paper:letter

" ----------
"  Strip all trailing whitespace in file
" ----------
function! StripWhitespace ()
    exec ':%s/ \+$//gc'
endfunction
map ,s :call StripWhitespace ()<CR>

hi clear SpellBad
hi SpellBad cterm=underline ctermfg=red
set spelllang=en_us

" --------------------
"  Type specific things
" --------------------
au BufRead,BufNewFile *.md       set wrap linebreak spell filetype=markdown
au BufRead,BufNewFile *.markdown set wrap linebreak spell filetype=markdown
au BufRead,BufNewFile *pf.conf*  set filetype=pf
au BufRead,BufNewFile *.py       set softtabstop=4 shiftwidth=4 tabstop=4
au BufRead,BufNewFile *.rb       set softtabstop=2 shiftwidth=2 tabstop=2
au BufRead,BufNewFile *.yml      set softtabstop=2 shiftwidth=2 tabstop=2
au BufRead,BufNewFile *.ddl      set filetype=mcollective_ddl
au BufRead,BufNewFile *.aug      set filetype=augeas
"au FileType gitcommit DiffGitCached | wincmd v
au BufRead $HOME/.mutt/temp*     set syntax=mail
au Filetype mail                 set textwidth=72 wrap spell 
au Filetype mail                 set fo+=aw
au Filetype mail                 color molokai
au Filetype gitcommit            set textwidth=80 wrap spell
au FileType make                 set noexpandtab shiftwidth=8 tabstop=8 cindent softtabstop=0
au FileType sh                   set expandtab shiftwidth=4 tabstop=4 cindent softtabstop=4
au FileType yaml                 set expandtab shiftwidth=2 tabstop=2 cindent softtabstop=2

" --------------------
"  Lang: GO
" --------------------
au FileType go nmap <F8> :GoMetaLinter<cr>
au FileType go nmap <F9> :GoCoverageToggle -short<cr>
au FileType go nmap <F10> :GoTest -short<cr>
au FileType go nmap <F12> <Plug>(go-def)
au Filetype go nmap <leader>ga <Plug>(go-alternate-edit)
au Filetype go nmap <leader>gah <Plug>(go-alternate-split)
au Filetype go nmap <leader>gav <Plug>(go-alternate-vertical)
au FileType go nmap <leader>gt :GoDeclsDir<cr>
au FileType go nmap <leader>gc <Plug>(go-coverage-toggle)
au FileType go nmap <leader>gd <Plug>(go-def)
au FileType go nmap <leader>gdv <Plug>(go-def-vertical)
au FileType go nmap <leader>gdh <Plug>(go-def-split)
au FileType go nmap <leader>gD <Plug>(go-doc)
au FileType go nmap <leader>gDv <Plug>(go-doc-vertical)
au FileType go highlight goField ctermfg=cyan guifg=#56b6c2

" vim-go
" let g:go_highlight_build_constraints = 1
" let g:go_highlight_extra_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
" let g:go_highlight_operators = 1
let g:go_highlight_structs = 1
let g:go_highlight_types = 1
" let g:go_auto_sameids = 1
let g:go_fmt_command = "goimports"
"let g:go_auto_type_info = 1
let g:go_snippet_engine = "neosnippet"
let g:go_gocode_propose_source = 1


" --------------------
"  Plugin specifics
" --------------------
if has('nvim')
    " Enable deoplete on startup
    let g:deoplete#enable_at_startup = 1
endif

let g:indent_guides_guide_size = 1

let python_highlight_all = 1
let g:python3_host_prog = '/Users/zleslie/.pyenv/versions/neovim3/bin/python'
let g:python_host_prog = '/Users/zleslie/.pyenv/versions/neovim2/bin/python'


" GnuPG
let g:GPGPreferArmor = 1
let g:GPGPreferDefaultRecipients = 0x7E546894A12BF8B0
let g:GPGUsePipes = 1

" Neoformat
let g:neoformat_enabled_python = ['autopep8', 'yapf']

" Ale"
let g:ale_sign_error = '⤫'
let g:ale_sign_warning = '⚠'

"  Airline
let g:airline_theme='one'
" Enable integration with airline.
let g:airline#extensions#ale#enabled = 1

" Colors
if has("gui_running")
  " colorscheme solarized
  colorscheme one
else
  " colorscheme focuspoint
  " colorscheme hybrid
  " colorscheme jellyx
  " colorscheme molokai
  " colorscheme afterglow
  " colorscheme kalisi
  " colorscheme gruvbox
  colorscheme one
endif

set background=dark

"  Highlight
highlight Comment         ctermfg=DarkGrey guifg=#444444
highlight StatusLineNC    ctermfg=Black    ctermbg=DarkGrey cterm=bold
highlight StatusLine      ctermbg=Black    ctermfg=LightGrey
highlight SpecialKey      ctermfg=DarkGray ctermbg=Black
highlight Search          ctermfg=Black    ctermbg=LightBlue guibg=LightBlue


" --------------------
"  Maps
" --------------------

" Set the leader
let mapleader = ';'

noremap <Leader>s :update<CR>
noremap <Leader>v :vsplit<CR>
noremap <Leader>c :close<CR>
noremap <Leader>e :Explore<CR>

" Copy to clipboard
vnoremap  <leader>y  "+y
nnoremap  <leader>Y  "+yg_
nnoremap  <leader>y  "+y
nnoremap  <leader>yy  "+yy

" Paste from clipboard
nnoremap <leader>p "+p
nnoremap <leader>P "+P
vnoremap <leader>p "+p
vnoremap <leader>P "+P

if has('nvim')
  set mouse=a
  set clipboard+=unnamedplus
else
  set clipboard=unnamed
endif


" Date/Time Stamp
map <leader>t a<c-r>=strftime("%Y-%m-%d %H:%M:%S")<CR><Esc>

" Toggle Tagbar
map <leader>T :TagbarToggle<CR>

" Disable Ruler
nnoremap <F7> :set nonumber!<CR>

" Replace DNS ZONE SOA
" nnoremap <F8> /\<\d\{10}\><CR>ce<C-r>=strftime("%Y%m%d00")<CR><Esc>:echo @"<CR>

" Clear search highlights
noremap <silent><leader>/ :nohls<CR>

" select all
"map <leader>a ggVG

" reflow paragraph with Q in normal and visual mode
nnoremap Q gqap
vnoremap Q gq

" Make Y behave like other capitals
map Y y$

" sane movement with wrap turned on
nnoremap j gj
nnoremap k gk
vnoremap j gj
vnoremap k gk

" Disable arrow keys for hjkl training
"inoremap  <Up>     <NOP>
"inoremap  <Down>   <NOP>
"inoremap  <Left>   <NOP>
"inoremap  <Right>  <NOP>
noremap   <Up>     <NOP>
noremap   <Down>   <NOP>
noremap   <Left>   <NOP>
noremap   <Right>  <NOP>

" Reselect visual block after indent/outdent
vnoremap < <gv
vnoremap > >gv

" Easy split navigation
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Better Command line Editing
"cnoremap <C-j> <t_kd>
"cnoremap <C-k> <t_ku>
cnoremap <C-a> <Home>
cnoremap <C-e> <End>

" Toggle listing invisible characters
nmap <leader>l :set list!<CR>

"
" Tabs
"nnoremap <silent><CSI>] :tabnext<CR>
"nnoremap <silent><CSI>[ :tabprevious<CR>
"nnoremap <silent><S-n> :tabnext<CR>
"nnoremap <silent><S-p> :tabprevious<CR>
nnoremap <C-n> :tabnext<CR>
nnoremap <C-p> :tabprevious<CR>
nnoremap <C-t> :tabnew<CR>
" nnoremap <C-k> :tabclose<CR>

"
"  FuzzyFinder
"noremap <Leader>f :FufFileWithCurrentBufferDir<CR>
"noremap <Leader>F :FufFile<CR>
"noremap <Leader>v :FufCoverageFile<CR>
"noremap <Leader>b :FufBuffer<CR>
"noremap <Leader>c :FufDirWithFullCwd<CR>
"noremap <Leader>u :FufRenewCache<CR>
"noremap <Leader>w :bdelete<CR>
"noremap <F1> :FufHelp<CR>

"
"  Tabularize
nnoremap <Leader>aa :Tabularize /=><CR>
vnoremap <Leader>aa :Tabularize /=><CR>
nnoremap <Leader>a= :Tabularize /=<CR>
vnoremap <Leader>a= :Tabularize /=<CR>
nnoremap <Leader>a: :Tabularize /:\zs<CR>
vnoremap <Leader>a: :Tabularize /:\zs<CR>

"
"  CtrlP
"let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
"let g:ctrlp_working_path_mode = 'ra'
"let g:ctrlp_working_path_mode = 'c'
let g:ctrlp_working_path_mode = '0'
let g:ctrlp_show_hidden = 1
noremap <Leader>f :CtrlPCurFile<CR>
noremap <Leader>d :CtrlP<CR>
noremap <Leader>s :CtrlP 
noremap <Leader>b :CtrlPBuffer<CR>
""noremap <Leader>v :CtrlPMixed<CR>
noremap <Leader>m :CtrlPMRU<CR>

" Vimux
" Prompt for a command to run
map <Leader>vp :VimuxPromptCommand<CR>

" Run last command executed by VimuxRunCommand
map <Leader>vl :VimuxRunLastCommand<CR>

" Inspect runner pane
map <Leader>vi :VimuxInspectRunner<CR>

" Zoom the tmux runner pane
map <Leader>vz :VimuxZoomRunner<CR>

" Close the tmux runner pane
map <Leader>vc :VimuxCloseRunner<CR>

"  Intent Guides
map <F6> :IndentGuidesToggle<CR>

" Neoformat
noremap <Leader>l :Neoformat<CR>

